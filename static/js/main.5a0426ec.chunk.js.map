{"version":3,"sources":["Result/Result.module.css","Calculator/Calculator.module.css","Result/Result.js","Calculator/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Result","props","className","classes","lengthInMeters","toFixed","travelTimeInSeconds","trafficDelayInSeconds","departureTime","arrivalTime","Calculator","state","apiKey","origin","destinationList","isValid","error","results","calculate","event","preventDefault","url","trim","axios","get","then","response","legs","console","log","data","routes","length","map","leg","i","key","summary","setState","catch","apiKeyHandler","target","value","originHandler","destinationHandler","checkValidity","this","onSubmit","href","type","name","onChange","placeholder","rows","onClick","disabled","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,OAAS,yB,kBCA3BD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,MAAQ,4B,kQCevDC,EAbA,SAACC,GACd,OACE,yBAAKC,UAAWC,IAAQH,QACtB,wCAAa,iCAAUC,EAAMG,eAAiB,KAAMC,QAAQ,GAA/C,QACb,0CAAe,iCAAUJ,EAAMK,oBAAsB,IAAID,QAAQ,GAAlD,aACf,6CAAkB,iCAAUJ,EAAMM,sBAAwB,IAAIF,QAAQ,GAApD,aAClB,6CAAkB,gCAASJ,EAAMO,gBACjC,2CAAgB,gCAASP,EAAMQ,cAC/B,+BCgHSC,E,2MApHbC,MAAQ,CACNC,OAAQ,mCACRC,OAAQ,uBACRC,gBAAiB,4CACjBC,SAAS,EACTC,MAAO,GACPC,QAAS,M,EAGXC,UAAY,SAAAC,GACVA,EAAMC,iBAEN,IAKIC,EALY,mDAMP,UACJ,EAAKV,MAAME,OAAOS,OADd,YACwB,EAAKX,MAAMG,gBAAgBQ,OADnD,wCACyF,EAAKX,MAAMC,OAAOU,QACpHC,IACGC,IAAIH,GACJI,MAAK,SAAAC,GACJ,IAAIC,EAAO,KACXC,QAAQC,IAAIH,EAASI,MAEjBJ,EAASI,KAAKC,OAAOC,OAAS,IAChCL,EAAOD,EAASI,KAAKC,OAAO,GAAGJ,KAAKM,KAAI,SAACC,EAAKC,GAC5C,OAAO,kBAAC,EAAD,eAAQC,IAAKD,GAAOD,EAAIG,cAGnC,EAAKC,SAAS,CAAErB,QAASU,OAE1BY,OAAM,SAAAvB,GACLY,QAAQC,IAAIb,GACZ,EAAKsB,SAAS,CACZtB,MAAO,4D,EAMfwB,cAAgB,SAAArB,GACd,EAAKmB,SAAS,CAAE1B,OAAQO,EAAMsB,OAAOC,S,EAGvCC,cAAgB,SAAAxB,GACd,EAAKmB,SAAS,CAAEzB,OAAQM,EAAMsB,OAAOC,S,EAGvCE,mBAAqB,SAAAzB,GACnB,EAAKmB,SAAS,CAAExB,gBAAiBK,EAAMsB,OAAOC,S,EAGhDG,cAAgB,WACd,IAAI9B,GAAU,EAEdA,EAAU,EAAKJ,MAAMC,OAAOU,OAAOU,OAAS,GAAKjB,EACjDA,EAAU,EAAKJ,MAAME,OAAOS,OAAOU,OAAS,GAAKjB,EACjDA,EAAU,EAAKJ,MAAMG,gBAAgBQ,OAAOU,OAAS,GAAKjB,EAE1D,EAAKuB,SAAS,CAAEvB,QAASA,K,wEAMzB,IAAME,EAAU6B,KAAKnC,MAAMM,QAE3B,OACE,yBAAKf,UAAWC,IAAQO,YACtB,mDACA,0BAAMqC,SAAUD,KAAK5B,WACnB,2CACe,uBAAG8B,KAAK,iCAAR,UADf,gFAIA,2BACEC,KAAK,OACLC,KAAK,SACLC,SAAUL,KAAKN,cACfE,MAAOI,KAAKnC,MAAMC,SAEpB,gGAGA,2BACEqC,KAAK,OACLC,KAAK,SACLC,SAAUL,KAAKH,cACfD,MAAOI,KAAKnC,MAAME,OAClBuC,YAAY,uBAEd,qFACA,qFACA,8BACEF,KAAK,eACLG,KAAK,KACLX,MAAOI,KAAKnC,MAAMG,gBAClBqC,SAAUL,KAAKF,sBAGnB,4BAAQU,QAASR,KAAK5B,UAAWqC,UAAWT,KAAKnC,MAAMI,SAAvD,aAGA,wCACCE,EACA6B,KAAKnC,MAAMK,MAAMgB,OAAS,EACzB,uBAAG9B,UAAWC,IAAQa,OAAQ8B,KAAKnC,MAAMK,OACvC,KACJ,0DAA+B,uBAAGgC,KAAK,wDAAR,8D,GA/GdQ,aCMVC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdhC,OAAM,SAAAvB,GACLY,QAAQZ,MAAMA,EAAMwD,c","file":"static/js/main.5a0426ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__Jf_Wz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Calculator\":\"Calculator_Calculator__28P_R\",\"error\":\"Calculator_error__2nR3R\"};","import React from 'react';\r\nimport classes from './Result.module.css';\r\n\r\nconst Result = (props) => {\r\n  return (\r\n    <div className={classes.Result}>\r\n      <p>Distance: <strong>{(props.lengthInMeters / 1000).toFixed(2)} KM</strong></p>\r\n      <p>TravelTime: <strong>{(props.travelTimeInSeconds / 60).toFixed(2)} minutes</strong></p>\r\n      <p>Traffic Delay: <strong>{(props.trafficDelayInSeconds / 60).toFixed(2)} minutes</strong></p>\r\n      <p>DepartureTime: <strong>{props.departureTime}</strong></p>\r\n      <p>ArrivalTime: <strong>{props.arrivalTime}</strong></p>\r\n      <hr />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport classes from \"./Calculator.module.css\";\r\nimport Result from '../Result/Result';\r\n\r\nclass Calculator extends Component {\r\n  state = {\r\n    apiKey: \"uHkAGJkTzX9PzOijHv5DmohLuxeTv6hJ\",\r\n    origin: \"15.047528,120.688474\",\r\n    destinationList: \"14.552333,121.004194:14.598770,120.974470\",\r\n    isValid: true,\r\n    error: \"\",\r\n    results: null\r\n  };\r\n\r\n  calculate = event => {\r\n    event.preventDefault();\r\n\r\n    const baseUrl = \"https://api.tomtom.com/routing/1/calculateRoute/\";\r\n\r\n    // const origin = \"15.047528,120.688474\";\r\n    // const dest = \"14.552333,121.004194:14.598770,120.974470\";\r\n\r\n    let url =\r\n      baseUrl +\r\n      `${this.state.origin.trim()}:${this.state.destinationList.trim()}/json?avoid=unpavedRoads&key=${this.state.apiKey.trim()}`;\r\n    axios\r\n      .get(url)\r\n      .then(response => {\r\n        let legs = null;\r\n        console.log(response.data);\r\n\r\n        if (response.data.routes.length > 0) {\r\n          legs = response.data.routes[0].legs.map((leg, i) => {\r\n            return <Result key={i} {...leg.summary} />;\r\n          });\r\n        }\r\n        this.setState({ results: legs });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.setState({\r\n          error: \"Encountered an error. Please check provided values.\"\r\n        });\r\n      });\r\n    // console.log(\"Calculated\", this.state.origin, this.state.destinationList);\r\n  };\r\n\r\n  apiKeyHandler = event => {\r\n    this.setState({ apiKey: event.target.value });\r\n  };\r\n\r\n  originHandler = event => {\r\n    this.setState({ origin: event.target.value });\r\n  };\r\n\r\n  destinationHandler = event => {\r\n    this.setState({ destinationList: event.target.value });\r\n  };\r\n\r\n  checkValidity = () => {\r\n    let isValid = true;\r\n\r\n    isValid = this.state.apiKey.trim().length > 0 && isValid;\r\n    isValid = this.state.origin.trim().length > 0 && isValid;\r\n    isValid = this.state.destinationList.trim().length > 0 && isValid;\r\n\r\n    this.setState({ isValid: isValid });\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"[render]\", this.state);\r\n\r\n    const results = this.state.results;\r\n    // this.calculate();\r\n    return (\r\n      <div className={classes.Calculator}>\r\n        <h1>Distance Calculator</h1>\r\n        <form onSubmit={this.calculate}>\r\n          <p>\r\n            Provide your <a href=\"https://developer.tomtom.com/\">TomTom</a> API Key. The provided key might run out of free\r\n            credits if used many times.\r\n          </p>\r\n          <input\r\n            type=\"text\"\r\n            name=\"apiKey\"\r\n            onChange={this.apiKeyHandler}\r\n            value={this.state.apiKey}\r\n          />\r\n          <p>\r\n            Provide the origin coordinates. For example: 15.047528,120.688474\r\n          </p>\r\n          <input\r\n            type=\"text\"\r\n            name=\"origin\"\r\n            onChange={this.originHandler}\r\n            value={this.state.origin}\r\n            placeholder=\"Origin Coordinates\"\r\n          />\r\n          <p>Provide destination coordinates separated by colon (:)</p>\r\n          <p>For example: 14.552333,121.004194:14.598770,120.974470</p>\r\n          <textarea\r\n            name=\"destinations\"\r\n            rows=\"10\"\r\n            value={this.state.destinationList}\r\n            onChange={this.destinationHandler}\r\n          />\r\n        </form>\r\n        <button onClick={this.calculate} disabled={!this.state.isValid}>\r\n          Calculate\r\n        </button>\r\n        <h3>Results:</h3>\r\n        {results}\r\n        {this.state.error.length > 0 ? (\r\n          <p className={classes.error}>{this.state.error}</p>\r\n        ) : null}\r\n        <p>Source code available here: <a href=\"https://github.com/mamertofabian/distance-calculator\">https://github.com/mamertofabian/distance-calculator</a></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator/Calculator';\n\nfunction App() {\n  return (\n    <div>\n      <Calculator />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}